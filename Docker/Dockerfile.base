# Template from https://raw.githubusercontent.com/JetBrains/clion-remote/master/Dockerfile.remote-cpp-env
# Following tutorial at https://blog.jetbrains.com/clion/2020/01/using-docker-with-clion/
# With additional details at https://www.jetbrains.com/help/clion/remote-projects-support.html
#
# CLion remote docker environment (How to build docker container, run and stop it)
#
# Build and run:
#   docker build -t clion/remote-cpp-env:0.5 -f Dockerfile.CLion.remote-cpp-env .
#   docker run -d --cap-add sys_ptrace -p127.0.0.1:2222:22 --name clion_remote_env clion/remote-cpp-env:0.5
#   ssh-keygen -f "$HOME/.ssh/known_hosts" -R "[localhost]:2222"
#
# stop:
#   docker stop clion_remote_env
#
# ssh credentials (test user):
#   user
#   clion
#
#   Authentication: ssh key: id_rsa_clionContainer.pub
#   Copy your own pubkey here

# Updated to based off of Mar 25 revision of the example file.  Includes using ubuntu:20.04, installing tzdata, and set terminal to bash

FROM ubuntu:20.04

ARG DEBIAN_FRONTEND="noninteractive"
ENV TZ="America/Los_Angeles"
RUN apt-get update \
  && apt-get install -y tzdata \
      ssh \
      build-essential \
      git \
      gcc \
      g++ \
      gdb \
      clang \
      cmake \
      rsync \
      tar \
      python \
#VSCode
      bash \
      apt-utils \
      dialog \
      iproute2 \
      procps \
      lsb-release\
#Vitis/Laminar Dependencies
      lcov \
#Need papi>5.6 which is the case with ubuntu 20.04
      papi-tools \
      libpapi-dev \
      libpfm4-dev \
      libboost-all-dev \
      libxerces-c-dev \
      graphviz \
#Used to install doxygen from apt but need a more modern version (see below) so I compile from src
#Doxygen build dependencies
      flex \
      bison \
#Other
      cloc \
  && apt-get clean

#TODO: Revisit if moving to a new Ubuntu base
#Install more modern doxygen 1.9.2 due to a regression in grouped classes (https://github.com/doxygen/doxygen/issues/7772)
RUN cd /tmp && \
    mkdir doxygen && \
    git clone https://github.com/doxygen/doxygen.git && \
    cd doxygen && \
    git checkout Release_1_9_2 && \
    mkdir build && \
    cd build && \
    cmake -G "Unix Makefiles" .. && \
    make && \
    make install && \
    #Cleanup Doxygen Build Dir
    cd /tmp && \
    rm -rf doxygen

RUN ( \
    echo 'LogLevel DEBUG2'; \
    echo 'PermitRootLogin yes'; \
    echo 'PasswordAuthentication no'; \
    echo 'PubkeyAuthentication yes'; \
    echo 'Subsystem sftp /usr/lib/openssh/sftp-server'; \
  ) > /etc/ssh/sshd_config_test_clion \
  && mkdir /run/sshd
